/*
 * tests/attentionbank/BankImplUTest.cxxtest
 *
 * Copyright (C) 2010 OpenCog Foundation
 * All Rights Reserved
 *
 * Written by Joel Pitt <joel@opencog.org>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <algorithm>

#include <math.h>
#include <string.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/attentionbank/bank/AttentionBank.h>
#include <opencog/atoms/truthvalue/SimpleTruthValue.h>
#include <opencog/util/Logger.h>

#include "makeVirtualAtom.h"
#include "sorting.h"

using namespace opencog;
using namespace std;

#define FLOAT_ACCEPTABLE_ERROR 0.000001

#define NUM_NODES 6
#define NUM_FORCEUSER_LINKS 4
#define NUM_HUMAN_LINKS 4

// deliberately out of order to test getSortedHandleSet.
#define AV1_STI 20000
#define AV2_STI 500
#define AV3_STI 0
#define AV1_LTI 0
#define AV2_LTI 30000
#define AV3_LTI 700

void setSTI(AttentionBank* ab, Handle h, AttentionValue::sti_t stiValue)
{
    /* Make a copy */
    AttentionValuePtr old_av = get_av(h);
    AttentionValuePtr new_av = AttentionValue::createAV(
        stiValue,
        old_av->getLTI(),
        old_av->getVLTI());
    ab->change_av(h, new_av);
}


void setLTI(AttentionBank* ab, Handle h, AttentionValue::lti_t ltiValue)
{
    AttentionValuePtr old_av = get_av(h);
    AttentionValuePtr new_av = AttentionValue::createAV(
        old_av->getSTI(),
        ltiValue,
        old_av->getVLTI());
    ab->change_av(h, new_av);
}

bool isLink(Handle h) { return h->is_link(); }

bool isNode(Handle h) { return h->is_node(); }

HandleSeq createSimpleGraph(AtomSpacePtr atomSpace, const char* baseName)
{
    AttentionBank* bank = &attentionbank(atomSpace.get());
    char buf[256];
    memset(buf, 0, 256);
    int baseNameLength = strlen(baseName);
    strcpy(buf, baseName);

    TruthValuePtr tv1 = SimpleTruthValue::createTV(0.001f, 0.00001f);
    TruthValuePtr tv2 = SimpleTruthValue::createTV(0.001f, 0.00001f);
    TruthValuePtr tv3 = SimpleTruthValue::createTV(0.5f, 0.99f);
    buf[baseNameLength] = '1';
    Handle h1 = atomSpace->add_node(CONCEPT_NODE, buf);
    h1->setTruthValue(tv1);
    setSTI(bank, h1, AV1_STI);
    setLTI(bank, h1, AV1_LTI);
    buf[baseNameLength] = '2';
    Handle h2 = atomSpace->add_node(CONCEPT_NODE, buf);
    h2->setTruthValue(tv2);
    setSTI(bank, h2, AV2_STI);
    setLTI(bank, h2, AV2_LTI);
    buf[baseNameLength] = '3';
    Handle h3 = atomSpace->add_node(CONCEPT_NODE, buf);
    h3->setTruthValue(tv3);
    setSTI(bank, h3, AV3_STI);
    setLTI(bank, h3, AV3_LTI);

    Handle l1 = atomSpace->add_link(LIST_LINK, h2, h3);
    l1->setTruthValue(tv1);
    Handle l2 = atomSpace->add_link(EVALUATION_LINK, h1, l1);
    l2->setTruthValue(tv2);

    HandleSeq testAtoms;
    testAtoms.push_back(h1);
    testAtoms.push_back(h2);
    testAtoms.push_back(h3);
    testAtoms.push_back(l1);
    testAtoms.push_back(l2);

    return testAtoms;
}

struct STIAboveThreshold : public HandlePredicate
{
    STIAboveThreshold(const AttentionValue::sti_t t) :
       threshold (t) {}

    virtual bool test(const Handle& atom) const
    {
        return get_sti(atom) > threshold;
    }
    AttentionValue::sti_t threshold;
};

struct LTIAboveThreshold : public HandlePredicate
{
    LTIAboveThreshold(const AttentionValue::lti_t t) :
       threshold (t) {}

    virtual bool test(const Handle& atom) const
    {
        return get_lti(atom) > threshold;
    }
    AttentionValue::lti_t threshold;
};

Handle addRealAtom(AtomSpace& as, AtomPtr atom,
                   TruthValuePtr tvn = TruthValuePtr())
{
    TruthValuePtr newTV = tvn ? tvn: atom->getTruthValue();
    // Check if the given Atom reference is of an atom
    // that was not inserted yet.  If so, adds the atom. Otherwise, just sets
    // result to the correct/valid handle.

    Handle result;
    if (atom->is_node()) {
        result = as.xget_handle(atom->get_type(), atom->get_name());
        if (result == Handle::UNDEFINED) {
            Handle h = as.add_node(atom->get_type(),
                                  std::move(std::string(atom->get_name())));
            h->setTruthValue(newTV);
            return h;
        }
    } else {
        result = as.xget_handle(atom->get_type(), atom->getOutgoingSet());
        if (result == Handle::UNDEFINED) {
            Handle h = as.add_link(atom->get_type(),
                             std::move(HandleSeq(atom->getOutgoingSet())));
            h->setTruthValue(newTV);
            return h;
        }
    }
    TruthValuePtr currentTV = result->getTruthValue();
    TruthValuePtr mergedTV = currentTV->merge(newTV);
    result->setTruthValue(mergedTV);
    return result;
}

/**
 * Filter handles from a sequence according to the given criterion.
 *
 * @param begin iterator for the sequence
 * @param end iterator for the sequence
 * @param struct or function embodying the criterion
 * @return The handles in the sequence that match the criterion.
 * @deprecated do not use in new code!
 */
template<typename InputIterator>
HandleSeq filter(InputIterator begin, InputIterator end, HandlePredicate& compare)
{
    HandleSeq result;
    std::copy_if(begin, end, back_inserter(result),
        [&](Handle h)->bool { return compare(h); } );
    return result;
}

/**
 * Gets a set of handles that matches with the given type
 * (subclasses optionally) and a given criterion.
 *
 * @param result An output iterator.
 * @param type The desired type.
 * @param subclass Whether type subclasses should be considered.
 * @param compare A criterion for including atoms. It must be something
 * that returns a bool when called.
 *
 * @return The set of atoms of a given type (subclasses optionally).
 *
 * @note The matched entries are appended to a container whose
 * OutputIterator is passed as the first argument.  Example of call to this
 * method, which would return all entries in AtomSpace beyond 500 LTI:
 * @code
 *         std::list<Handle> ret;
 *         atomSpace.getHandleSet(back_inserter(ret), ATOM, true, LTIAboveThreshold(500));
 * @endcode
 */
template <typename OutputIterator> OutputIterator
getHandleSetFiltered(AtomSpacePtr as, OutputIterator result,
             Type type,
             bool subclass,
             HandlePredicate& compare)
{
    HandleSeq hs;
    as->get_handles_by_type(hs, type, subclass);

    return std::copy_if(hs.begin(), hs.end(), result,
        [&](Handle h)->bool { return compare(h); } );
}

// Wrapper for comparing atoms from a HandleSeq
template <typename Compare>
struct compareAtom
{
    Compare* c;
    compareAtom(Compare* _c) : c(_c) {}

    bool operator()(Handle h1, Handle h2) {
        return (*c)(h1, h2);
    }
};


/**
 * Gets a set of handles that matches with the given type
 * (subclasses optionally), sorted according to the given comparison
 * structure.
 *
 * @param result An output iterator.
 * @param type The desired type.
 * @param subclass Whether type subclasses should be considered.
 * @param compare The comparison struct to use in the sort.
 *
 * @return The set of atoms of a given type (subclasses optionally).
 *
 * @note The matched entries are appended to a container whose
 * OutputIterator is passed as the first argument.  Example of call to this
 * method, which would return all entries in AtomSpace, sorted by STI:
 * @code
 *         std::list<Handle> ret;
 *         STISort stiSort;
 *         atomSpace.getHandleSet(back_inserter(ret), ATOM, true, stiSort);
 * @endcode
 */
template <typename OutputIterator, typename Compare> OutputIterator
getSortedHandleSet(AtomSpacePtr as,
             OutputIterator result,
             Type type,
             bool subclass,
             Compare compare)
{
    // get the handle set as a vector and sort it.
    HandleSeq hs;

    as->get_handles_by_type(hs, type, subclass);
    std::sort(hs.begin(), hs.end(), compareAtom<AtomComparator>(compare));
    return std::copy(hs.begin(), hs.end(), result);
}

template<typename InputIterator>
HandleSeq filter_InAttentionalFocus(AtomSpacePtr as, InputIterator begin,
InputIterator end)
{
    STIAboveThreshold sti_above(attentionbank(as.get()).get_af_max_sti());
    return filter(begin, end, sti_above);
}

class BankImplUTest :  public CxxTest::TestSuite
{
private:

    AtomSpacePtr atomSpace;
    AttentionBank* bank;

public:
    BankImplUTest() {
        logger().set_level(Logger::INFO);
        logger().set_print_to_stdout_flag(true);
    }

    void setUp() {
        atomSpace = createAtomSpace();
        bank = &attentionbank(atomSpace.get());
    }

    void tearDown() {
        attentionbank(nullptr);
    }

    struct mean : public HandlePredicate
    {
        virtual bool test(const Handle& h) const {
            return h->getTruthValue()->get_mean() > 0.8;
        }
    };

    struct everything : public HandlePredicate
    {
        virtual bool test(const Handle& h) const { return true; }
    };

    void testMiscellaneous()
    {
        logger().debug("\ntestMiscelaneous()\n");

        const char* nodeNames[NUM_NODES] = {
            "Vader",
            "Luke",
            "Chewbacca",
            "R2D2",
            "Force",
            "Human"
        };
        Handle h[NUM_NODES];
        for (int i = 0; i < NUM_NODES; i++) {
            h[i] = atomSpace->add_node (CONCEPT_NODE, nodeNames[i]);
            h[i]->setTruthValue(SimpleTruthValue::createTV(0.001f, 0.99f));
        }
        logger().debug("Nodes created\n");

        float ForceUser[NUM_FORCEUSER_LINKS] = {0.99f, 0.99f, 0.0f, 0.5f};
        Handle FU[NUM_FORCEUSER_LINKS];
        for (int i = 0; i < NUM_FORCEUSER_LINKS; i++) {
            HandleSeq temp(2);
            temp[0] = h[i];
            temp[1] = h[4];
            FU[i] = atomSpace->add_link(SUBSET_LINK, std::move(temp));
            FU[i]->setTruthValue(SimpleTruthValue::createTV(ForceUser[i], 0.99f));
        }
        logger().debug("ForceUser links created\n");

        float Human[4] = {0.99f, 0.99f, 0.5f, 0.0f};
        HandleSeq out[4];
        Handle H[4];
        for (int i = 0; i < 4; i++) {
            out[i].push_back(h[i]);
            out[i].push_back(h[5]);
            H[i] = atomSpace->add_link(INHERITANCE_LINK, std::move(HandleSeq(out[i])));
            H[i]->setTruthValue(SimpleTruthValue::createTV(Human[i], 0.99f));
        }
        logger().debug("Human links created\n");

        // Check TVS
        for (int i = 0; i < NUM_NODES; i++) {
            TruthValuePtr tv = h[i]->getTruthValue();
            logger().debug("tv initialized to TV object with pointer %p => &(getTV(h[i])) = %p\n", tv.get(), h[i]->getTruthValue().get());
            logger().debug("h: tv mean = %f, getTV(h[i]) = %f\n", tv->get_mean(), h[i]->getTruthValue()->get_mean());
            TS_ASSERT(fabs(tv->get_mean() - 0.001) < FLOAT_ACCEPTABLE_ERROR);
            logger().debug("h: confidence = %f, diff = %f, error = %f\n", tv->get_confidence(), fabs(tv->get_confidence() - 0.99), FLOAT_ACCEPTABLE_ERROR);
            TS_ASSERT(fabs(tv->get_confidence() - 0.99) < FLOAT_ACCEPTABLE_ERROR);
            if (i < NUM_FORCEUSER_LINKS) {
                TruthValuePtr tv = FU[i]->getTruthValue();
                //logger().debug("AFTER ASSIGN THE reference tv to another TV: &tv = %p, getTV(h[i] = %p getTV(FU[i]) = %p\n", tv.get(), atomSpace->getTV(h[i].get()), atomSpace->getTV(FU[i]).get());
                // logger().debug("h: tv mean = %f, atomSpace->getTV(h[i]) = %f\n", tv->get_mean(), atomSpace->getTV(h[i])->get_mean());
                // logger().debug("FU: tv mean = %f, atomSpace->getTV(FU[i]) = %f\n", tv->get_mean(), atomSpace->getTV(FU[i])->get_mean());
                TS_ASSERT(fabs(tv->get_mean() - ForceUser[i]) < FLOAT_ACCEPTABLE_ERROR);
                logger().debug("FU: confidence = %f, diff = %f, error = %f\n", tv->get_confidence(), fabs(tv->get_confidence() - 0.99), FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(tv->get_confidence() - 0.99) < FLOAT_ACCEPTABLE_ERROR);
            }
            if (i < NUM_HUMAN_LINKS) {
                TruthValuePtr tv = H[i]->getTruthValue();
                // logger().debug("h: tv mean = %f, atomSpace->getTV(h[i]) = %f\n", tv->get_mean(), atomSpace->getTV(h[i])->get_mean());
                // logger().debug("FU: tv mean = %f, atomSpace->getTV(FU[i]) = %f\n", tv->get_mean(), atomSpace->getTV(FU[i])->get_mean());
                // logger().debug("H: tv mean = %f,atomSpace->getTV(H[i]) = %f\n", tv->get_mean(), atomSpace->getTV(H[i])->get_mean());
                TS_ASSERT(fabs(tv->get_mean() - Human[i]) < FLOAT_ACCEPTABLE_ERROR);
                logger().debug("H: confidence = %f, diff = %f, error = %f\n", tv->get_confidence(), fabs(tv->get_confidence() - 0.99), FLOAT_ACCEPTABLE_ERROR);
                TS_ASSERT(fabs(tv->get_confidence() - 0.99) < FLOAT_ACCEPTABLE_ERROR);
            }
        }
        logger().debug("TVS checked\n");

        TS_ASSERT(atomSpace->get_num_atoms_of_type(NODE, true) == NUM_NODES);
        TS_ASSERT(atomSpace->get_num_atoms_of_type(LINK, 8) == 8);

        HandleSeq hsn;
        atomSpace->get_handles_by_type(hsn, NODE, true);
        TS_ASSERT(hsn.size() == NUM_NODES);

        HandleSeq hsl;
        atomSpace->get_handles_by_type(hsl, LINK, true);
        TS_ASSERT(hsl.size() == 8);

        // Test getHandleSet
        // OutputIterator getHandleSet(OutputIterator, Type, const string& name, bool acceptSubTypes=true) const;

#define NUM_VHS 4

        // Test filters
        for (int vhIdx = 0; vhIdx < NUM_VHS; vhIdx++) {

            mean m;
            HandleSeq high_mean;
            getHandleSetFiltered(atomSpace, back_inserter(high_mean), ATOM, true, m);
            logger().debug("Filter %d checked", vhIdx);

            //std::cout << "high mean size " << high_mean.size() << std::endl;
            //for (int jj = 0; jj < high_mean.size(); jj++) {
            //    std::cout << atomSpace->atomAsString(high_mean[jj],false) << std::endl;
            //}

            HandleSeq nodes;
            atomSpace->get_handles_by_type(nodes, NODE, true);
            logger().debug("Get nodes by type %d checked", vhIdx);

            HandleSeq links;
            atomSpace->get_handles_by_type(links, LINK, true);
            logger().debug("Get links by type %d checked", vhIdx);

            HandleSeq all;
            everything e;
            getHandleSetFiltered(atomSpace, back_inserter(all), ATOM, true, e);

            HandleSeq AF_nodes = filter_InAttentionalFocus(atomSpace, nodes.begin(), nodes.end());
            HandleSeq AF_links = filter_InAttentionalFocus(atomSpace, links.begin(), links.end());

            logger().debug("Focus %d checked", vhIdx);
            TS_ASSERT(AF_nodes.size() == 0);
            TS_ASSERT(AF_links.size() == 0);
        }


        logger().debug("Start subset test");
        for (int vhIdx = 0; vhIdx < NUM_VHS; vhIdx++) {

            // TS_ASSERT(nameserver().isA(SUBSET_LINK, INHERITANCE_LINK));

            // Note: SUBSET_LINK is a subType of INHERITANCE_LINK
            // No its not.
            HandleSeq links;
            atomSpace->get_handles_by_type(links, LINK, true);
            logger().debug("1) links.size() = %d Expected = %d\n", (int) links.size(), (vhIdx == 0 ? 8 : 2));
            TS_ASSERT(links.size() == 8);
            links.clear();
            atomSpace->get_handles_by_type(links, LINK, false);
            //logger().debug("2) links.size() = %d\n", links.size());
            TS_ASSERT(links.size() == 0);
            HandleSeq allInhLinks;
            atomSpace->get_handles_by_type(allInhLinks, INHERITANCE_LINK, true);
            //logger().info("4) allInhLinks.size() = %d (vhIdx: %d)\n", allInhLinks.size(), vhIdx);
            //for (unsigned int x = 0; x < allInhLinks.size(); ++x) {
            //    logger().info("allInhLinks[x]: %s\n", allInhLinks[x]->to_string().c_str());
            //}
            // TS_ASSERT(allInhLinks.size() == 8);
            HandleSeq justInhLinks;
            atomSpace->get_handles_by_type(justInhLinks, INHERITANCE_LINK, false);
            //logger().info("5) justInhLinks.size() = %d (vhIdx: %d)\n", justInhLinks.size(), vhIdx);
            TS_ASSERT(justInhLinks.size() == 4);
            HandleSeq partOfLinks;
            atomSpace->get_handles_by_type(partOfLinks, SUBSET_LINK, true);
            //logger().debug("5) partOfLinks.size() = %d\n", partOfLinks.size());
            TS_ASSERT(partOfLinks.size() == 4);
            partOfLinks.clear();
            atomSpace->get_handles_by_type(partOfLinks, SUBSET_LINK, false);
            //logger().debug("6) partOfLinks.size() = %d\n", partOfLinks.size());
            TS_ASSERT(partOfLinks.size() == 4);
        }
    }


    static inline Handle addAtomIter(AtomSpace& as, tree<Vertex>& a, tree<Vertex>::iterator it, TruthValuePtr tvn)
    {
        Handle* head_handle_ptr = boost::get<Handle>(&(*it));
        Type* head_type_ptr = boost::get<Type>(&(*it));
        OC_ASSERT((head_handle_ptr != NULL) ^ (head_type_ptr != NULL), "addAtom(): Vertex should be of 'Handle' or 'Type' type.");

        HandleSeq handles;

        if (head_handle_ptr != NULL) {
            // OC_ASSERT(as.holds(*head_handle_ptr), "head_handle_ptr is not valid");
            Handle h = addRealAtom(as, *head_handle_ptr);
            h->setTruthValue(tvn);
            return h;
        }

        for (tree<Vertex>::sibling_iterator i = a.begin(it); i != a.end(it); i++) {
            Handle *h_ptr = boost::get<Handle>(&*i);

            if (h_ptr) {
                handles.push_back(addRealAtom(as, *h_ptr));
            } else {
                handles.push_back(addAtomIter(as, a, i, TruthValue::TRIVIAL_TV()));
            }
        }

        Handle h = as.add_link(*head_type_ptr, std::move(handles));
        h->setTruthValue(tvn);
        return h;
    }

    static inline Handle addAtom(AtomSpace& as, tree<Vertex>& a, TruthValuePtr tvn)
    {
        return addAtomIter(as, a, a.begin(), tvn);
    }

    /**
     * Method tested:
     *
     * Add a new atom represented by a tree of Vertex to the Atom Table
     * @param the tree of Vertex representation of the atom to be added
     * @param the TruthValue object to be associated to the added atom
     * @param a flag to indicate if it does not need to check for already existing atoms in AtomTable.
     * @param managed ???
     *
     * virtual Handle addAtom(tree<Vertex>& a, const TruthValue& tvn, bool fresh=false, bool managed=true);
     */
#define mva makeVirtualAtom
    void testAddAtomVtreeTruthValueBool()
    {
        Handle h1 = atomSpace->add_node(PREDICATE_NODE, "barkingAt");
        h1->setTruthValue(SimpleTruthValue::createTV(0.001f, 0.00001f));
        Handle h2 = atomSpace->add_node(CONCEPT_NODE, "dog1");
        h2->setTruthValue(SimpleTruthValue::createTV(0.001f, 0.00001f));
        Handle h3 = atomSpace->add_node(CONCEPT_NODE, "tree");
        h3->setTruthValue(SimpleTruthValue::createTV(0.5f, 0.99f));


        tree<Vertex>* tr = mva(EVALUATION_LINK,
                               mva(h1, NULL),
                               mva(LIST_LINK,
                                   mva(h2, NULL),
                                   mva(h3, NULL),
                                   NULL
                                  ) ,
                               NULL
                              );

        HandleSeq links;
        atomSpace->get_handles_by_type(links, LINK, true);
        logger().debug("links.size() = %d\n", (int) links.size());
        TS_ASSERT(links.size() == 0);
        Handle evalLink = addAtom(*atomSpace, *tr, TruthValue::DEFAULT_TV());
        TS_ASSERT(evalLink != Handle::UNDEFINED);
        links.clear();
        atomSpace->get_handles_by_type(links, LINK, true);
        logger().debug("links.size() = %d\n", (int) links.size());
        TS_ASSERT(links.size() == 2);
        delete tr;

        Handle hn = atomSpace->add_node(PREDICATE_NODE, "barkingAt");
        tr = mva(hn, NULL);
        Handle h1_ = addAtom(*atomSpace, *tr, SimpleTruthValue::createTV(0.5f, 0.5f));
        TS_ASSERT(h1_ != Handle::UNDEFINED);
        // In this case, the expected behavior is to perform a merge and return the
        // handle was inserted previously.
        TS_ASSERT(h1_ == h1);
        AtomPtr atom(h1_);
        TS_ASSERT(atom->getTruthValue()->get_mean() - 0.5f < FLOAT_ACCEPTABLE_ERROR);
        delete tr;

        tr = mva(evalLink, NULL);
        Handle evalLink_ = addAtom(*atomSpace, *tr, SimpleTruthValue::createTV(0.5f, 0.5f));
        TS_ASSERT(evalLink_ != Handle::UNDEFINED);
        // In this case, the expected behavior is to perform a merge and return the
        // handle was inserted previously.
        TS_ASSERT(evalLink_ == evalLink);
        atom = evalLink_;
        TS_ASSERT(atom->getTruthValue()->get_mean() - 0.5f < FLOAT_ACCEPTABLE_ERROR);
        delete tr;
    }

    /**
     * Method tested:
     *
     * Add a new node to the Atom Table
     * @param t     Type of the node
     * @param name  Name of the node
     * @param tvn   TruthValue of the node
     *
     * virtual Handle add_node(Type t,const string& name,const TruthValue& tvn,bool fresh=false,bool managed=true)=0;
     *
     */
    void testAddNode()
    {
        TruthValuePtr tv1 = SimpleTruthValue::createTV(0.001f, 0.00001f);
        TruthValuePtr tv2 = SimpleTruthValue::createTV(0.001f, 0.00001f);
        TruthValuePtr tv3 = SimpleTruthValue::createTV(0.5f, 0.99f);
        Handle h1 = atomSpace->add_node(PREDICATE_NODE, "barkingAt");
        h1->setTruthValue(tv1);
        Handle h2 = atomSpace->add_node(CONCEPT_NODE, "dog1");
        h2->setTruthValue(tv2);
        Handle h3 = atomSpace->add_node(CONCEPT_NODE, "tree");
        h3->setTruthValue(tv3);

        TruthValuePtr tv1_ = SimpleTruthValue::createTV(0.002f, 0.00002f);
        TruthValuePtr tv2_ = SimpleTruthValue::createTV(0.1f, 0.0f);
        TruthValuePtr tv3_ = SimpleTruthValue::createTV(0.6f, 0.90f);
        Handle h1_ = atomSpace->add_node(PREDICATE_NODE, "barkingAt");
        tv1->merge(tv1_);
        h1_->setTruthValue(tv1);
        Handle h2_ = atomSpace->add_node(CONCEPT_NODE, "dog1");
        tv2->merge(tv2_);
        h2_->setTruthValue(tv2);
        Handle h3_ = atomSpace->add_node(CONCEPT_NODE, "tree");
        tv3->merge(tv3_);
        h3_->setTruthValue(tv3);

        TS_ASSERT(h1 == h1_);
        TruthValuePtr h1tv = h1->getTruthValue();
        TS_ASSERT(h1tv->get_mean() - tv1_->get_mean() < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(h1tv->get_count() - tv1_->get_count() < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(h2 == h2_);
        TruthValuePtr h2tv = h2->getTruthValue();
        TS_ASSERT(h2tv->get_mean() - tv2->get_mean() < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(h2tv->get_count() - tv2->get_count() < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(h3 == h3_);
        TruthValuePtr h3tv = h3->getTruthValue();
        TS_ASSERT(h3tv->get_mean() - tv3->get_mean() < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(h3tv->get_count() - tv3->get_count() < FLOAT_ACCEPTABLE_ERROR);

        // test adding a node with no truth value
        Handle h4 = atomSpace->add_node(CONCEPT_NODE, "wood");
        TS_ASSERT(h4 != Handle::UNDEFINED);

        // Check that isNode returns true
        TS_ASSERT(isNode(h4));
        // Check that isLink returns false
        TS_ASSERT(!isLink(h4));

#if 0
// The current design to support this leaks memory. So I plugged the
// memory leak. But that means that this test fails.  So I am disabling
// this test for now ... If someone wants to implement this correctly
// someday (so that id doesn't leak memory) then, whatever, go ahead.
// (I still think its a bad idea, for all sorts of reasons)

        // test adding a node with no name or truth value
        Handle h5 = atomSpace->add_node(NODE);
        TS_ASSERT(h5 != Handle::UNDEFINED);
        Handle h6 = atomSpace->add_node(NODE);
        TS_ASSERT(h6 != Handle::UNDEFINED);
        TS_ASSERT(h5 != h6);

        // test fetching all unnamed nodes
        HandleSeq allUnnamed;
        atomSpace->getHandlesByName(back_inserter(allUnnamed), NODE, "", true);
        printf("\nallUnnamed.size() == %zu\n", allUnnamed.size());
        TS_ASSERT(allUnnamed.size() == 2);
        TS_ASSERT(find(allUnnamed.begin(), allUnnamed.end(), h5) != allUnnamed.end());
        TS_ASSERT(find(allUnnamed.begin(), allUnnamed.end(), h6) != allUnnamed.end());
#endif
    }


    /**
     * Method tested:
     *
     * Add a new link to the Atom Table
     * @param t         Type of the link
     * @param outgoing  HandleSeq containing the outgoing set of the link
     * @param tvn       TruthValue of the link
     *
     * virtual Handle add_link(Type t,const HandleSeq& outgoing,TruthValuePtr tvn,bool fresh=false,bool managed=true)=0;
     */
    void testAddLink()
    {
        Handle h1 = atomSpace->add_node(PREDICATE_NODE, "barkingAt");
        h1->setTruthValue(SimpleTruthValue::createTV(0.001f, 0.00001f));
        Handle h2 = atomSpace->add_node(CONCEPT_NODE, "dog1");
        h2->setTruthValue(SimpleTruthValue::createTV(0.001f, 0.00001f));
        Handle h3 = atomSpace->add_node(CONCEPT_NODE, "tree");
        h3->setTruthValue(SimpleTruthValue::createTV(0.5f, 0.99f));

        TruthValuePtr tv1 = SimpleTruthValue::createTV(0.001f, 0.00001f);
        TruthValuePtr tv2 = SimpleTruthValue::createTV(0.001f, 0.00001f);
        Handle l1 = atomSpace->add_link(LIST_LINK, h2, h3);
        l1->setTruthValue(tv1);

        Handle l2 = atomSpace->add_link(EVALUATION_LINK, h1, l1);
        l2->setTruthValue(tv2);

        // Check that isNode returns false
        TS_ASSERT(!isNode(l2));
        // Check that isLink returns true
        TS_ASSERT(isLink(l2));

        TruthValuePtr tv1_ = SimpleTruthValue::createTV(0.002f, 0.00002f);
        Handle l1_ = atomSpace->add_link(LIST_LINK, h2, h3);
        tv1->merge(tv1_);
        l1_->setTruthValue(tv1);

        TruthValuePtr tv2_ = SimpleTruthValue::createTV(0.1f, 0.0f);
        Handle l2_ = atomSpace->add_link(EVALUATION_LINK, h1, l1);
        tv2->merge(tv2_);
        l2_->setTruthValue(tv2);

        TS_ASSERT(l1 == l1_);
        TruthValuePtr l1tv = l1->getTruthValue();
        TS_ASSERT(l1tv->get_mean() - tv1_->get_mean() < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(l1tv->get_count() - tv1_->get_count() < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(l2 == l2_);
        TruthValuePtr l2tv = l2->getTruthValue();
        TS_ASSERT(l2tv->get_mean() - tv2->get_mean() < FLOAT_ACCEPTABLE_ERROR);
        TS_ASSERT(l2tv->get_count() - tv2->get_count() < FLOAT_ACCEPTABLE_ERROR);

    }

    void testIsSource()
    {
        Handle h1 = atomSpace->add_node(PREDICATE_NODE, "barkingAt");
        h1->setTruthValue(SimpleTruthValue::createTV(0.001f, 0.00001f));
        Handle h2 = atomSpace->add_node(CONCEPT_NODE, "dog1");
        h2->setTruthValue(SimpleTruthValue::createTV(0.001f, 0.00001f));
        Handle h3 = atomSpace->add_node(CONCEPT_NODE, "tree");
        h3->setTruthValue(SimpleTruthValue::createTV(0.5f, 0.99f));
        TruthValuePtr tv1 = SimpleTruthValue::createTV(0.001f, 0.00001f);
        TruthValuePtr tv2 = SimpleTruthValue::createTV(0.001f, 0.00001f);
        HandleSeq outgoing1;
        outgoing1.push_back(h2);
        outgoing1.push_back(h3);
        Handle l1 = atomSpace->add_link(SET_LINK, std::move(outgoing1));
        l1->setTruthValue(tv1);
        HandleSeq outgoing2;
        outgoing2.push_back(h1);
        outgoing2.push_back(l1);
        Handle l2 = atomSpace->add_link(EVALUATION_LINK, std::move(outgoing2));
        l2->setTruthValue(tv2);
    }

    void testGetHandle_bugfix1() {
        AtomSpace atomSpace;
        HandleSeq emptyOutgoing;
        Handle result = atomSpace.xget_handle(LIST_LINK, emptyOutgoing);
        TS_ASSERT(result == Handle::UNDEFINED);
        atomSpace.add_link(LIST_LINK);
        result = atomSpace.xget_handle(LIST_LINK, emptyOutgoing);
        TS_ASSERT(result != Handle::UNDEFINED);
    }


    /**
     * Method tested:
     *
     * Gets a set of handles that matches with the given type
     * (subclasses optionally), sorted according to the given comparison
     * structure.
     *
     * @param An output iterator.
     * @param The desired type.
     * @param Whether type subclasses should be considered.
     * @param The comparison struct to use in the sort.
     *
     * @return The set of atoms of a given type (subclasses optionally).
     *
     * NOTE: The matched entries are appended to a container whose OutputIterator is passed as the first argument.
     *          Example of call to this method, which would return all entries in TimeServer, sorted by STI:
     *         std::list<Handle> ret;
     *         STISort stiSort;
     *         atomSpace->getHandleSet(back_inserter(ret), ATOM, true, stiSort);
     */
    void testgetSortedHandleSet()
    {
        AtomSpacePtr as = createAtomSpace();
        HandleSeq atoms;
        logger().debug("BEGIN TEST: getSortedHandleSet");
        atoms = createSimpleGraph(as, "stim_sortedHandleSet\0");

        logger().debug("STISort");

        STISort sSort;
        HandleSeq sAtoms;
        getSortedHandleSet(as, back_inserter(sAtoms), ATOM, true, &sSort);
        for (unsigned int i = 0; i < sAtoms.size() - 1; i++) {
            TS_ASSERT(sSort(sAtoms[i + 1], sAtoms[i]) == false);
        }

        logger().debug("LTIAndTVAscendingSort");

        LTIAndTVAscendingSort latvSort;
        HandleSeq latvAtoms;
        getSortedHandleSet(as, back_inserter(latvAtoms), ATOM, true, &latvSort);
        for (unsigned int i = 0; i < latvAtoms.size() - 1; i++) {
            TS_ASSERT(latvSort(latvAtoms[i + 1], latvAtoms[i]) == false);
        }

        logger().debug("LTIThenTVAscendingSort");

        LTIThenTVAscendingSort lttvSort;
        HandleSeq lttvAtoms;
        getSortedHandleSet(as, back_inserter(lttvAtoms), ATOM, true, &lttvSort);
        for (unsigned int i = 0; i < lttvAtoms.size() - 1; i++) {
            TS_ASSERT(lttvSort(lttvAtoms[i + 1], lttvAtoms[i]) == false);
        }

        logger().debug("END TEST: getSortedHandleSet");
    }

    void testGetNormalisedSTI()
    {
        Handle hlo = atomSpace->add_node(CONCEPT_NODE, "low");
        Handle h = atomSpace->add_node(CONCEPT_NODE, "high");
        bool clip = false, average = false;
        TS_ASSERT_EQUALS(bank->getNormalisedZeroToOneSTI(get_av(h), average, clip), 0.0);

        setSTI(bank, hlo, 1);
        setSTI(bank, h, 15);

        average = true;
        TS_ASSERT(1.0 <= bank->getNormalisedZeroToOneSTI(get_av(h), average, clip));
        clip = true;
        TS_ASSERT_DELTA(bank->getNormalisedZeroToOneSTI(get_av(h), average, clip), 1.0, 0.001);
    }

    /**
     * Method tested:
     *
     * Gets a set of handles that matches with the given type
     * (subclasses optionally) and a given criterion.
     *
     * @param An output iterator.
     * @param The desired type.
     * @param Whether type subclasses should be considered.
     * @param A criterion for including atoms. It must be something that returns a bool when called.
     *
     * @return The set of atoms of a given type (subclasses optionally).
     *
     * NOTE: The matched entries are appended to a container whose OutputIterator is passed as the first argument.
     *          Example of call to this method, which would return all entries in TimeServer beyond 500 LTI:
     *         std::list<Handle> ret;
     *         atomSpace.getHandleSet(back_inserter(ret), ATOM, true, LTIAboveThreshold(500));
     */
    void testgetHandleSetFiltered()
    {
        HandleSeq atoms;
        logger().debug("BEGIN TEST: getHandleSetFiltered");

        atoms = createSimpleGraph(atomSpace, "hs_filt\0");

        logger().debug("STIAboveThreshold");

        HandleSeq highSTI;
        STIAboveThreshold sti_above(1000);
        getHandleSetFiltered(atomSpace, back_inserter(highSTI), NODE, true, sti_above);
        for (unsigned int i = 0; i < highSTI.size(); i++) {
            TS_ASSERT(STIAboveThreshold(1000) (highSTI[i]) );
        }
        TS_ASSERT(highSTI.size() == 1U);
        TS_ASSERT(highSTI[0] == atoms[0]);

        logger().debug("LTIAboveThreshold");

        HandleSeq highLTI;
        LTIAboveThreshold lti_above(800);
        getHandleSetFiltered(atomSpace, back_inserter(highLTI), NODE, true, lti_above);
        for (unsigned int i = 0; i < highLTI.size(); i++) {
            TS_ASSERT(LTIAboveThreshold(800) (highLTI[i]) );
        }
        TS_ASSERT(highLTI.size() == 1U);
        TS_ASSERT(highLTI[0] == atoms[1]);
        logger().debug("END TEST: getHandleSetFiltered");
    }

    /**
     * Method tested:
     *
     * Filter handles from a sequence according to the given criterion.
     *
     * @param begin iterator for the sequence
     * @param end iterator for the sequence
     * @param struct or function embodying the criterion
     * @return The handles in the sequence that match the criterion.
     */
    void testfilter() {
        HandleSeq atoms;
        logger().debug("BEGIN TEST: filter");

        //atomSpace->getAtomTable().log(logger(), NODE, true);
        //atomSpace->getAtomTable().log(logger(), LINK, true);

        atoms = createSimpleGraph(atomSpace, "filt\0");

        //atomSpace->getAtomTable().log(logger(), NODE, true);
        //atomSpace->getAtomTable().log(logger(), LINK, true);

        logger().debug("STIAboveThreshold");

        STIAboveThreshold sti_above(1000);
        HandleSeq highSTI = filter(atoms.begin(), atoms.end(), sti_above);
        for (unsigned int i = 0; i < highSTI.size(); i++) {
            //std::cout << atomSpace->atomAsString(highSTI[i],false) << std::endl;
            //std::cout << atomSpace->getSTI(highSTI[i]) << std::endl;
            TS_ASSERT(STIAboveThreshold(1000) (highSTI[i]) );
        }
        TS_ASSERT(highSTI.size() == 1U);
        TS_ASSERT(highSTI[0] == atoms[0]);

        logger().debug("LTIAboveThreshold");

        LTIAboveThreshold lti_above(800);
        HandleSeq highLTI = filter(atoms.begin(), atoms.end(), lti_above);
        for (unsigned int i = 0; i < highLTI.size(); i++) {
            TS_ASSERT(LTIAboveThreshold(800) (highLTI[i]) );
        }
        TS_ASSERT(highLTI.size() == 1U);
        TS_ASSERT(highLTI[0] == atoms[1]);
        logger().debug("END TEST: filter");
    }

};
